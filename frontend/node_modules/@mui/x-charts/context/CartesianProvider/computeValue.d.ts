import { AxisConfig, ScaleName } from '../../models';
import { ChartsXAxisProps, ChartsAxisProps, ChartsYAxisProps } from '../../models/axis';
import { CartesianChartSeriesType } from '../../models/seriesType/config';
import { DrawingArea } from '../DrawingProvider';
import { FormattedSeries } from '../SeriesProvider';
import { ExtremumGetter } from '../PluginProvider';
import { DefaultizedAxisConfig, ZoomData, ZoomOptions, GetZoomAxisFilters } from './Cartesian.types';
type ComputeResult<T extends ChartsAxisProps> = {
    axis: DefaultizedAxisConfig<T>;
    axisIds: string[];
};
type ComputeCommonParams = {
    drawingArea: DrawingArea;
    formattedSeries: FormattedSeries;
    extremumGetters: {
        [K in CartesianChartSeriesType]?: ExtremumGetter<K>;
    };
    zoomData?: ZoomData[];
    zoomOptions?: ZoomOptions;
    getFilters?: GetZoomAxisFilters;
};
export declare function computeValue(options: ComputeCommonParams & {
    axis: AxisConfig<ScaleName, any, ChartsYAxisProps>[];
    axisDirection: 'y';
}): ComputeResult<ChartsYAxisProps>;
export declare function computeValue(options: ComputeCommonParams & {
    axis: AxisConfig<ScaleName, any, ChartsXAxisProps>[];
    axisDirection: 'x';
}): ComputeResult<ChartsAxisProps>;
export {};
